---
title: "Setting Up Your Quarto Book on a New PC: Initial Setup"
subtitle: "Part 1: Installation and Configuration"
author: "Your Name"
format: html
editor: visual
---

## Introduction

Moving your Quarto book project from Mac to PC doesn't have to be complicated. This guide will walk you through the process step by step, explaining each command and action so you understand not just what to do, but why you're doing it.

The guide is split into two parts:
- Part 1 (this document): Initial setup and configuration
- Part 2: Working with your book and daily workflows

## Step 1: Essential Software Setup

Before we can work with your Quarto book on your new PC, we need to set up some essential tools. Let's go through them one by one.

### Installing Required Software

1. **RStudio**: 
   - If not already installed, download from www.rstudio.com
   - Install with default settings

2. **Git**: 
   - Download from https://git-scm.com/download/windows
   - During installation:
     * Accept default options
     * Choose "Git from the command line and also from 3rd-party software"
     * For line endings, select "Checkout as-is, commit as-is"

3. **Required R Packages**:
   Open RStudio and run these commands:
   ```{r}
   #| eval: false
   
   # Install necessary packages
   install.packages(c("usethis", "gitcreds"))
   ```

### Verifying Your Setup

Let's make sure everything is working correctly:

```{r}
#| eval: false

# Check Git configuration
usethis::git_sitrep()
```

This command will show you if Git is properly installed and configured. If you see any red text or errors, don't worry - we'll fix them in the next step.

### Configuring Git

Now we'll tell Git who you are. Use the same details as on your Mac to maintain consistency:

```{r}
#| eval: false

# Set up your Git identity
usethis::use_git_config(
  user.name = "pierzgal",
  user.email = "pierzgal@gmail.com"
)
```

## Step 2: GitHub Authentication

To connect securely with GitHub, we need to set up authentication. This is like giving your PC a special key to access your GitHub account.

### Setting Up Authentication

1. **Get Your GitHub Token**:
   - Go to GitHub.com and log in
   - Click your profile picture → Settings
   - Scroll to "Developer settings" (bottom left)
   - Select "Personal access tokens" → "Tokens (classic)"
   - Click "Generate new token (classic)"
   - Name: "RStudio-PC"
   - Permissions: select 'repo' and 'workflow'
   - Click "Generate token"
   - Copy the token immediately (it won't be shown again!)

2. **Store Your Token in RStudio**:
```{r}
   #| eval: false
   
   # Store your GitHub token
   gitcreds::gitcreds_set() # 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
```
   When prompted, paste your token.

## Step 3: Setting Up Your Repository

Now comes the important decision: how to set up your book repository on the PC. We'll explore two methods, from simplest to most complex. Choose the one that best fits your needs.

### Method 1: Clean Start (Recommended for Beginners)

This method is straightforward and minimizes potential complications. We'll take it step by step, ensuring your book renders correctly in your new environment before setting up version control.

1. **Create New GitHub Repository**:
   - Go to GitHub.com
   - Click "+" → "New repository"
   - Name it (e.g., "my-book-pc")
   - Don't add any files
   - Click "Create repository"
   - Copy the repository URL

2. **Prepare Your Project**:
   First, let's get your files in order and ensure they render correctly in your new PC environment. This is crucial because different operating systems might handle rendering differently.

   a. **Copy Your Files**:
      - Copy your Quarto book folder from Mac to PC
      - Put it in a permanent location (not cloud storage)
      - Ensure you have all essential files:
        * All .qmd files
        * _quarto.yml
        * .Rproj file
        * Any images or data files

   b. **Initial Rendering**:
      - Open your project (.Rproj file) in RStudio
      - Go to the Build tab (usually top right)
      - Click "Render Book"
      - This creates/updates the docs/ folder with PC-rendered files
      - Review the rendered book to ensure everything looks correct
      - Fix any rendering issues before proceeding with Git setup

   Think of this like testing all your equipment in a new studio before starting work. You want to make sure everything works in your new environment before setting up version control.

3. **Initialize Git via RStudio**:
   Now that your book renders correctly, let's set up version control:
   - In RStudio: Tools → Project Options → Git/SVN
   - In "Version control system" select "Git"
   - Click "Yes" to confirm
   - Restart RStudio when prompted

4. **Initial Commit**:
   Let's add your files to Git in a logical order - source files first, then rendered output:
   ```bash
   # Add your source files first
   git add *.qmd
   git add _quarto.yml
   git add *.Rproj
   
   # Commit source files
   git commit -m "Add initial source files"
   
   # Now add rendered book
   git add docs/
   
   # Commit rendered files
   git commit -m "Add rendered book"
   ```

5. **Connect to GitHub and Push**:
   ```bash
   # Connect to your GitHub repository
   git remote add origin https://github.com/yourusername/my-book-pc.git
   
   # Set up main branch
   git branch -M main
   
   # Push everything to GitHub
   git push -u origin main
   ```

6. **Verify Setup**:
   - Go to your GitHub repository
   - Check that both source (.qmd) and rendered (docs/) files are there
   - Files should be organized similarly to your Mac repository
   

### Method 2: Fork Your Repository

If you want to keep a connection to your Mac version:

1. **Fork on GitHub**:
   - Go to your original Mac repository
   - Click "Fork"
   - Choose your account
   - Optionally rename (e.g., add "-pc")
   - Click "Create fork"

2. **Clone to PC**:
   - In RStudio: File → New Project → Version Control → Git
   - Paste your forked repository URL
   - Choose local folder
   - Click "Create Project"

This method maintains the history from your Mac version and allows you to track changes between versions if needed.

## Next Steps

In Part 2, we'll cover:
- How to work with your book daily
- Different ways to add and commit files
- Setting up GitHub Pages
- Troubleshooting common issues


---
title: "Working with Your Quarto Book on PC"
subtitle: "Part 2: Daily Workflows and Best Practices"
author: "Your Name"
format: html
editor: visual
---

## Introduction

Now that your Quarto book is set up on your PC (covered in Part 1), let's learn how to work with it effectively. This guide will explain the daily workflows, best practices, and troubleshooting tips for maintaining your book.

## Understanding Git Add Commands

Before we dive into daily workflows, it's important to understand how Git tracks your files. When working with Quarto books, you have different options for adding files to Git's tracking system.

### The Two Main Approaches

1. **Using `git add .`**

   Think of `git add .` as telling Git "track everything in this folder." When you use this command:
   - Git will track all changed files
   - This includes your source files (.qmd), rendered files (in docs/), and any other files
   - It's like packing everything in your room into a moving box

   Example:
   ```bash
   git add .
   git commit -m "Update all files"
   ```

2. **Using `git add docs/`**

   This is a more selective approach. When you use `git add docs/`:
   - Only the rendered book files (HTML, images) are tracked
   - Source files won't be included unless added separately
   - It's like only packing the finished product, not the raw materials

   Example:
   ```bash
   # Add only rendered book
   git add docs/
   git commit -m "Update rendered book"
   ```

### Recommended Workflow

Here's a structured approach that combines the best of both methods:

1. **For Source Files**:
   ```bash
   # Add specific types of files
   git add *.qmd            # Your book content
   git add _quarto.yml      # Book configuration
   git add images/*.png     # Images used in your book
   
   # Commit source changes
   git commit -m "Update Chapter 3 content"
   ```

2. **For Rendered Book**:
   ```bash
   # After rendering, add the docs folder
   git add docs/
   git commit -m "Update rendered book"
   ```


## Daily Working Process

Understanding when to render your book is crucial for maintaining a clean and organized workflow. Let's walk through a complete working session that properly integrates the rendering process.

### Starting Your Work Session

Always begin by getting any updates from GitHub:

```bash
# Make sure you're up to date
git pull origin main

# Render the book to ensure everything looks right with the pulled changes
# Use RStudio's Build pane -> Render Book
# This step helps catch any formatting issues from recent changes
```

### Making and Tracking Changes

The key to a smooth workflow is understanding the relationship between your source files (what you write) and rendered files (what people see). Think of it like publishing a book: you want to save both your manuscript and the printed version, but in the right order.

Here's the recommended workflow:

1. **Edit Your Source Files**:
   - Open and edit your .qmd files in RStudio
   - Save your changes
   - Preview individual chapters with the "Render" button if needed

2. **Check What You've Changed**:
   ```bash
   # See what files have changed
   git status
   
   # See detailed changes in a file
   git diff chapter1.qmd
   ```

3. **Stage and Commit Source Changes First**:
   ```bash
   # Add only the source files
   git add *.qmd
   git add _quarto.yml
   git add images/*.png     # If you've added new images
   
   # Commit your source changes
   git commit -m "Update Chapter 3 with new analysis section"
   ```

4. **Render the Complete Book**:
   - Click the Build tab in RStudio
   - Choose "Render Book"
   - This creates/updates all files in your docs/ folder
   - Wait for the rendering to complete
   - Review the rendered book to ensure everything looks correct

5. **Stage and Commit Rendered Files**:
   ```bash
   # Add the rendered files
   git add docs/
   
   # Commit the rendered version
   git commit -m "Update rendered book"
   ```

6. **Push Everything to GitHub**:
   ```bash
   # Push both your source and rendered commits
   git push origin main
   ```

### Why This Order Matters

Following this specific order helps you:
- Keep source changes separate from rendered output
- Track down rendering problems more easily
- Maintain a clean project history
- Ensure your online book stays in sync with your source files

For example, if rendering fails, your source changes are already safely committed. You can fix the rendering issue without losing any work.

### Common Rendering Scenarios

1. **After Pulling Changes**:
   ```bash
   git pull origin main
   # Render to check everything works
   # If rendered output differs:
   git add docs/
   git commit -m "Update rendered book after pull"
   git push origin main
   ```

2. **When Adding New Features**:
   ```bash
   # Edit _quarto.yml to add new features
   git add _quarto.yml
   git commit -m "Add new chapter navigation"
   
   # Render to apply changes
   # Add rendered results
   git add docs/
   git commit -m "Update rendered book with new navigation"
   ```

3. **When Working on Multiple Chapters**:
   ```bash
   # Edit multiple chapters
   git add chapter1.qmd chapter2.qmd
   git commit -m "Update analysis sections in chapters 1 and 2"
   
   # Render full book
   git add docs/
   git commit -m "Update rendered book"
   ```


## Setting Up GitHub Pages

To make your book available online:

1. **Ensure Your _quarto.yml is Configured**:
   ```yaml
   project:
     type: book
     output-dir: docs
   ```

2. **Enable GitHub Pages**:
   - Go to your repository on GitHub
   - Click Settings → Pages
   - Source: select "main" and "/docs"
   - Click "Save"

Your book will be available at: `https://yourusername.github.io/repository-name`

## Best Practices and Tips

### Organizing Your Work

1. **Commit Messages**:
   Write clear, descriptive commit messages:
   ```bash
   # Good:
   git commit -m "Add new section on data analysis in Chapter 4"
   
   # Not so good:
   git commit -m "updates"
   ```

2. **Keeping Track of Changes**:
   Create a `CHANGELOG.md` file to track major changes:
   ```markdown
   # Changelog
   
   ## [2024-11-30]
   - Added new chapter on methodology
   - Updated data visualizations in Chapter 3
   ```

### File Management

Create a `.gitignore` file to exclude unnecessary files:
```text
.Rproj.user/
.Rhistory
.RData
.Ruserdata
/.quarto/
/_site/
*.log
```

## Troubleshooting Common Issues

### Authentication Problems

If you can't push or pull:
```r
# Check your stored token
gitcreds::gitcreds_get()

# Set a new token if needed
gitcreds::gitcreds_set()
```

### Push Rejected

If your push is rejected:
```bash
# Get latest changes first
git pull origin main

# Then try pushing again
git push origin main
```

### Book Not Updating Online

1. Check your rendered files:
   ```bash
   # Verify docs folder is committed
   git status
   ```

2. Verify GitHub Pages settings:
   - Check repository settings
   - Ensure "main" and "/docs" are selected
   - Wait a few minutes for changes to appear

## Getting Help

If you encounter issues:

1. **Check Error Messages**:
   - Read the error message carefully
   - Copy the exact message if searching for help

2. **Resources**:
   - Quarto Documentation: https://quarto.org
   - Happy Git with R: https://happygitwithr.com/
   - RStudio Community: https://community.rstudio.com

Remember: Version control has a learning curve. Take your time, commit often, and don't hesitate to ask for help when needed.
